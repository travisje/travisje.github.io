<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Travis Emmett's blog]]></title>
  <link href="http://travisje.github.io/atom.xml" rel="self"/>
  <link href="http://travisje.github.io/"/>
  <updated>2015-09-24T17:02:15-04:00</updated>
  <id>http://travisje.github.io/</id>
  <author>
    <name><![CDATA[Travis Emmett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sandi Metz and Object-Oriented Design in Ruby]]></title>
    <link href="http://travisje.github.io/blog/2015/09/24/Metz/"/>
    <updated>2015-09-24T15:03:53-04:00</updated>
    <id>http://travisje.github.io/blog/2015/09/24/Metz</id>
    <content type="html"><![CDATA[<p>If you talk to most Rubyists, a book almost universally held in high esteem is Sandi Metz’s <a href= "http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?ie=UTF8&qid=1442510842&sr=8-1&keywords=practical+object+oriented+design+in+ruby">Practical Object-Oriented Design in Ruby</a>. Before my time at The Flatiron School, I had some experience in programming but mainly from the procedural side, so when Objects or Classes started coming into the fold, I would usually end up running for the hills. After the program, I felt like I had finally acquired a solid foundation in Object Orientation, but I still wanted to get a better understanding of some of its nuances. So I thought it was high time to pick up Sandi&rsquo;s tome and see what all the fuss was about. And, about a quarter of the way in, I get it.</p>

<p>It’s very cool having a seasoned developer like Sandi describe, in fluid prose, her best practices over the last 30 years of her career.  It’s like having a good friend available at all times to answer your nagging questions “Ok sure, but why?” It’s also great to see, rather than just teaching from the best code first, her progression through various refactorings starting with the newbie antipattern. So without further adieu, here are some interesting points from her from the first few chapters:</p>

<h3>Classes and methods should have a single responsibility and do the smallest possible thing</h3>


<p>Most people have heard this before but it&rsquo;s important because one of the major advantages of Object Oriented code is that if written correctly it should serve as a set of interchangeable parts to be used by future programmers. Implemented well it usually means features can be changed, removed, or added without changes cascading down through your application’s codebase in a programming nightmare.  D.R.Y. (Do not Repeat Yourself) ties in nicely here because achieving DRY code often forces you to break your program into small, unique parts.</p>

<p>Deciding on how to divide up your classes and what responsibilities can be intimidating but Sandi provides a few rules of thumb: 1. Try to define the rule of your class in one sentence not using AND or OR. If it doesn’t fit, probably rethink it 2. As for what behaviors belong in your class, try asking your class its various methods in the form of a question to see if it makes sense. Like “Hi Appointment, what is your time?” sounds pretty good. But “Hi Appointment, what is your square footage?” sounds suspect and belongs in another class.</p>

<h3>Avoid dependencies</h3>


<p>Avoiding dependencies is a large topic (too large to be covered here) and is one of the central theme’s of Sandi’s book but I think this statement of hers sums it up nicely:</p>

<blockquote><p>“Every dependency is like a little dot of glue that causes your class to stick to the things it touches. A few dots are necessary, but apply too much glue and your application will harden into a solid block.”
 -Sandi Metz</p></blockquote>

<p>So very true and I couldn’t have said it better.  Minimizing dependencies between classes ensures that when one class needs to change that it will be pliable and won’t set off a cascade of expensive changes in other classes.  One small way to do this that I enjoyed reading a little more about was why it can be advantageous to use a singular hash argument when instantiating an object instead of relying on several argument order ones:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="no">Class</span> <span class="no">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:height</span><span class="p">,</span> <span class="ss">:hair_color</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:height</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@hair_color</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:hair_color</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">“</span><span class="no">Travis</span><span class="err">”</span><span class="p">,</span>  <span class="ss">hair_color</span><span class="p">:</span> <span class="err">“</span><span class="n">brown</span><span class="err">”</span><span class="p">,</span> <span class="ss">height</span><span class="p">:</span> <span class="mi">6</span><span class="o">.</span><span class="mi">25</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a hash has several advantages including 1. As an initialization argument’s order and number can sometimes change in the future this helps prevent it from breaking when other classes instatiate a new object of that class 2. The keys are instructive of their purpose and what their values represent. 3. Why, removes unnecessary dependencies across your code of course!</p>

<h3>Heed the Law of Demeter (LoD) aka Avoid Trainwrecks</h3>


<p>The Law of Demeter broadly maintains that it is bad practice to send messages to distant objects when relying an intermediate object to get there.  Every Demeter infringement isn’t necessarily wrong but always be wary of the possibility especially if you are altering an attribute of a distant object and not just accessing it.  Following this advice results in loosely coupled objects, a hallmark of good OO code.</p>

<p>Take for example if you have a class called “Order” and it has a method within it called “place_order” and within that method the following call is made: customer.cart.items.update_stock.  This would likely be a violation of Demeter because you are accessing the customer object to get to the cart object to get to the item objects to implement the update_stock method to change each item’s quantity attributes.  Whew, I’m outta breath. Sometimes this is simply referred to as “avoiding trainwrecks” due to a violation’s long method chain’s resemblance to train cars and their propensity to crash your program, which I think is much more memorable than remembering the Greek harvest goddess (sorry Dem).</p>

<h3>Access instance variables via methods</h3>


<p>Yes, I am guilty sometimes of referring to instance variables directly when I should use a reader or writer method instead. But I never fully understood why it was important not to.  Sandi makes a good argument for always using a reader method instead because if you decide that your instance variable requires an interim calculation after you have peppered the instances throughout your codebase, it will take some time to fix when using a method would require a code change in only one spot.</p>

<h3>Actively categorize you methods as public or private</h3>


<p>How you classify your methods within a class tells a story about your code and communicates your intentions to other programmers.  A public method generally carries along the following assumptions with it: 1. Other objects are free to utilize it 2. That it is stable and will not likely change 3. Communicates the responsibilities and purpose of your class. 4. That it should be tested.  Private methods on the other hand generally indicate that your code is not meant to be relied on by other objects (it actually cannot in Ruby without a workaround) and may change and generally is not part of the core testing framework of an application.</p>

<p>Well, these are just a few of the many things I have learned thus far from Sandi and look forward to finishing the rest. It really is a fascinating book because it delves so deeply into the philosophy of programming and object orientation.  Perhaps I will go through some other lessons of hers when I have the chance.  Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Few of My Favorite Gems...]]></title>
    <link href="http://travisje.github.io/blog/2015/07/26/favorite-gems/"/>
    <updated>2015-07-26T20:03:53-04:00</updated>
    <id>http://travisje.github.io/blog/2015/07/26/favorite-gems</id>
    <content type="html"><![CDATA[<p> Along my journey of learning Rails, I thought it would be helpful for beginners if I listed a few of the indispensable gems I have come across. Before I started developing in Ruby, I would always hear people talking about 'gems' but not really have a firm grasp on what a gem actually was.  A gem is basically a library or plug-in that provides some additional functionality that you can require your application to load every time it is run. They are incredibly helpful because they allow the developer to focus on building out the unique parts of an application, rather than reinventing the wheel each time. <a href='https://rubygems.org/'>Rubygems.org</a> is the main repository of Ruby gems (there are over 6,650 gems listed currently) but <a href='https://www.ruby-toolbox.com/'>Ruby Toolbox</a> is also a great resource because it breaks gems down by category. So, in no specific order, here are just a few of my favorites: </p>




<h3>Rails ERD</h3>


<p> I love <a href = 'http://rails-erd.rubyforge.org/'> Rails ERD</a>. I think there's a tendency when coding to discount visual representations of data and logic for the text editor. While parsing code and relational data mentally is great, I think drawing it out is very important because it allows you to get a more complete understanding of how your data is really interacting with each other. Rails ERD utilizes Graphviz, an open source visualization library, to visualize your Active Record database schema and their relationships (which is probably an over fancy way of saying it let you visualize your database). It renders a nice pdf of your database schema and here is an example below:</p>


<p><img class="left" src="http://travisje.github.io/images/rails-erd.png"></p>

<p>Note that Rails ERD requires Graphviz to be installed on your system and detailed instructions can be found <a href = 'http://rails-erd.rubyforge.org/install.html'>here</a>.  Once installed, you can type simply "erd" in your console and find the rendered file in your project's main directory under erd.pdf. I actually like to display foreign keys in my tables so to have ERD do this you would type "rake erd attributes=foreign_key,content" into your console instead.
</p>




<h3>Faker</h3>


<p><p><a href='https://github.com/stympy/faker'>Faker</a> is a really fun gem to play with. Sooner or later, your applications will get to the size where your databases need a bunch of realistic data to test with. Faker will supply a huge variety of data with which to construct example seed data. So, for instance, in place of making up a street address yourself, you could specify Faker::Address.street_address and it would provide you an example address like &ldquo;282 Kevin Brook&rdquo;. It has tons of different kinds of sample data available. Some of the more interesting ones: Avatar images, company slogans, and of course sample bitcoin addresses for all you Internet currency junkies. Here&rsquo;s a quick example of creating a new Person entry in your database with Faker:</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:first_name</span>   <span class="o">=&gt;</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:last_name</span>    <span class="o">=&gt;</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">last_name</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:email</span>        <span class="o">=&gt;</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Internet</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3>Figaro</h3>
<p><a href='https://github.com/laserlemon/figaro'>Figaro</a> is an extremely helpful gem when you begin utilizing API&rsquo;s in your applications.  If you are using a public GitHub account in the development of your project, once you supply your API key inside of your application, you want to make sure GitHub does not remember this file, lest it be found by a malicious user.  This is where Figaro comes in handy and makes the process very easy. As the steps were a little confusing online when I began using it, assuming you are building a Rails application, here is an example implementation that worked for me:<br><br>
1. Add &ldquo;gem &lsquo;figaro&rsquo;&rdquo; to your gemfile in your Rails application<br><br>
2. Type &ldquo;bundle install&rdquo; in your console<br><br>
3. Then type &ldquo;figaro install&rdquo; in your console. This will create a file in your config folder called application.yml where we will save the API key.  This will also add an entry for application.yml in your .gitignore file so git will not push it to GitHub (be aware when working with any team members they will also have to perform these steps in order to use the API)<br><br>
4. Go into your config/application.yml file created by Figaro in the previous step and enter your api key. There are different ways to do this but in the recent project I worked on, we chose to enter our key like this:<br>
weather_api: &ldquo;f0403B7e04110UI15c&rdquo;<br><br>
5. Then, find the place in your application (usually within your API&rsquo;s model class) where you are making the request to the api for data, and save the api key to a variable:<br>
api_key = ENV[&ldquo;weather_api&rdquo;]<br><br>
Voila, you now have access to your api key from the variable api_key without it ever appearing on GitHub!
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's a Form_for, or for That Matter, a Form_tag? Some Examples...]]></title>
    <link href="http://travisje.github.io/blog/2015/07/13/form_for/"/>
    <updated>2015-07-13T20:03:53-04:00</updated>
    <id>http://travisje.github.io/blog/2015/07/13/form_for</id>
    <content type="html"><![CDATA[<p> Last week I was introduced to the magic that are the various form builder methods in Rails. It was a little intimidating to me because I am sort of a control freak with my code and Rails makes a number of assumptions behind the scenes as to what you are trying to do. But it's also amazing because with that automation, you can say goodbye to writing out html forms manually and these methods can be very smart. There is a ton of documentation online which is a great resource, but I was a little frustrated that it was hard to find an example all in one spot of a form's ruby code, the html output, what the form looked like on a web page, and the corresponding params hash sent on submission of the form.</p>


<p>So, in case you are looking for a quick reference to these tags, here are a few briefly explained:</p>




<h2> form_tag </h2>


<p>The <a href= 'http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag'>form_tag</a> is an ActionView helper method that follows the url provided to it and defaults to the POST method unless you specify otherwise. Here we are specifying a PATCH action in order to update a record:</p>


<h1><h4>views/concretes/edit.html.erb:</h4></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_tag(&quot;/concretes/</span><span class="si">#{</span><span class="vi">@concrete</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="sx">&quot;, :method =</span><span class="o">&gt;</span> <span class="s1">&#39;patch&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;%= label_tag (&quot;mix type&quot;) %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= text_field_tag(&#39;concrete[mix_type]&#39;, @concrete.mix_type) %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">submit_tag</span> <span class="s2">&quot;Update Concrete&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second argument in text_field_tag is responsible for pre filling in the value of the existing record (which you&rsquo;ll notice is filled in below) in order to submit an update.</p>

<h1><h4> Outputted HTML:</h4></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/concretes/1&quot;</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;✓&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span>
</span><span class='line'><span class="na">name=</span><span class="s">&quot;_method&quot;</span> <span class="na">value=</span><span class="s">&quot;patch&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;aBUUH4T65nmHGLS/uATo5yNttcsWRW8gpyrV4MvPEDbfOKWuqmC498fV8r9WAYHBBvHQOBNctaeeLqcuk27iRQ==&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;mix_type&quot;</span><span class="nt">&gt;</span>Mix type<span class="nt">&lt;/label&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;concrete[mix_type]&quot;</span> <span class="na">id=</span><span class="s">&quot;concrete_mix_type&quot;</span> <span class="na">value=</span><span class="s">&quot;stone&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">value=</span><span class="s">&quot;Update Concrete&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h4> Example form (non functioning):</h4></h1>

<p><form action="/concretes/1" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="_method" value="patch"><input type="hidden" name="authenticity_token" value="aBUUH4T65nmHGLS/uATo5yNttcsWRW8gpyrV4MvPEDbfOKWuqmC498fV8r9WAYHBBvHQOBNctaeeLqcuk27iRQ==">
<label for="mix_type">Mix type</label>
<input type="text" name="concrete[mix_type]" id="concrete_mix_type" value="stone" >
<input type="submit" name="commit" value="Update Concrete">
</form></p>

<h4> Params content:</h4>


<p>And here is the content of the params hash after submission of the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="p">{</span><span class="s2">&quot;utf8&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;✓&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;_method&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;patch&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;authenticity_token&quot;</span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="s2">&quot;aBUUH4T65nmHGLS/uATo5yNttcsWRW8gpyrV4MvPEDbfOKWuqmC498fV8r9WAYHBBvHQOBNctaeeLqcuk27iRQ==&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;concrete&quot;</span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="s2">&quot;mix_type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;stone&quot;</span><span class="p">},</span>
</span><span class='line'> <span class="s2">&quot;commit&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Update Concrete&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;controller&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;concretes&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;action&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;update&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;id&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;1&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This params hash could then be intercepted in the concretes controller's update method where you would save the changes to the existing record.</p>




<h2>form_for</h2>




<p>The <a href='http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html'>form_for</a> method is another ActionView helper that offers an additional level of abstraction (and ease) over it's lower level form_tag counterpart. This is a good approach to take if you are practicing the Rails convention of RESTful routing and you are using a standard active record object, in this case an instance of the Baby class. Because Rails makes so many assumptions about your form, it is good practice to still double check your data is being routed correctly. Below is a basic illustration of entering a new baby name in a database: </p>


<h1><h4>views/babies/new.html.erb:</h4></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for (@baby) do |f| %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:first_name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;%= f.text_field :first_name %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= f.label :birth_date %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">date_field</span> <span class="ss">:birth_date</span> <span class="sx">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;%= f.submit %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>Note the amazing number of assumptions Rails has made about your form! Based on the view type that the form_for is added to (in this case our new Baby view), Rails guesses correctly the method (post), the name of the submit button (Create Baby), the desired nesting of data in the params hash for mass assignment ease -- baby[first_name] and baby[birth_date], among other things.</p>


<h1><h4> Outputted HTML:</h4></h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;new_baby&quot;</span> <span class="na">id=</span><span class="s">&quot;new_baby&quot;</span> <span class="na">action=</span><span class="s">&quot;/babies&quot;</span> <span class="na">accept-charset=</span><span class="s">&quot;UTF-8&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span>
</span><span class='line'><span class="na">_lpchecked=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">name=</span><span class="s">&quot;utf8&quot;</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">value=</span><span class="s">&quot;✓&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span>
</span><span class='line'><span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;6/3miTvGAxS4pv3D2/</span>
</span><span class='line'><span class="s">zQU8iLYnwDB1wDaYC6e7qDknNc0Fc4FVxdmvhru8M1+bl17RcHjwYehoRQhMi14iJgAA==&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;baby_first_name&quot;</span><span class="nt">&gt;</span>First name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;baby[first_name]&quot;</span> <span class="na">id=</span><span class="s">&quot;baby_first_name&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;baby_birth_date&quot;</span><span class="nt">&gt;</span>Birth date<span class="nt">&lt;/label&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;date&quot;</span> <span class="na">name=</span><span class="s">&quot;baby[birth_date]&quot;</span> <span class="na">id=</span><span class="s">&quot;baby_birth_date&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;commit&quot;</span> <span class="na">value=</span><span class="s">&quot;Create Baby&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1><h4> Example form (non functioning):</h4></h1>

<p><form class="new_baby" id="new_baby" action="/babies" accept-charset="UTF-8"
method="post" _lpchecked="1"><input name="utf8" type="hidden" value="✓">
<input type="hidden" name="authenticity_token" value="6/3miTvGAxS4pv3D2/zQU8iLYnwDB1wDaYC6e7qDknNc0Fc4FVxdmvhru8M1+bl17RcHjwYehoRQhMi14iJgAA==">
<label for="baby_first_name">First name</label>
<input type="text" name="baby[first_name]" id="baby_first_name" >
<label for="baby_birth_date">Birth date</label>
<input type="date" name="baby[birth_date]" id="baby_birth_date">
<input type="submit" name="commit" value="Create Baby">
</form></p>

<h4> Params content:</h4>


<pre><code class="Ruby">{"utf8"=&gt;"✓",
 "authenticity_token"=&gt;
  "6/3miTvGAxS4pv3D2/zQU8iLYnwDB1wDaYC6e7qDknNc0Fc4FVxdmvhru8M1+bl17RcHjwYehoRQhMi14iJgAA==",
 "baby"=&gt;
  {"first_name"=&gt;"Brandnew",
   "birth_date"=&gt;"2015-07-13"},
 "commit"=&gt;"Create Baby",
 "controller"=&gt;"babies",
 "action"=&gt;"create"}
</code></pre>

<p>This params hash could then be intercepted in the babies controller's create method where you would add the data from the params hash to the database.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dude, Where's My Object?]]></title>
    <link href="http://travisje.github.io/blog/2015/06/28/dude/"/>
    <updated>2015-06-28T20:03:53-04:00</updated>
    <id>http://travisje.github.io/blog/2015/06/28/dude</id>
    <content type="html"><![CDATA[<p>I love things that expose a little bit of what Ruby is doing under the hood. And I’m new to object orientation so you will just have to humor me here. Let’s say you’re in IRB and you just created a shiny new Car class with the following Ruby code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'><span class="kp">attr_accessor</span> <span class="ss">:make</span><span class="p">,</span> <span class="ss">:model</span><span class="p">,</span> <span class="ss">:year</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">make</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">year</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@make</span> <span class="o">=</span> <span class="n">make</span>
</span><span class='line'>    <span class="vi">@model</span> <span class="o">=</span> <span class="n">model</span>
</span><span class='line'>    <span class="vi">@year</span><span class="o">=</span> <span class="n">year</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">drive</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Vrooom!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now you decide you’re ready to create a new car so you can get ready to take it for a spin with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Car</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Renault&quot;</span><span class="p">,</span> <span class="s2">&quot;LeCar&quot;</span><span class="p">,</span>  <span class="mi">1979</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Renault LeCar? Nice choice! Now, let’s ride. But wait, you forgot to assign your new car to a variable.  Dude, where’s your car?</p>

<p>Well, as it turns out, it’s not actually gone.  It just requires a little snooping around to get it back.  Ruby comes packaged with a module called <a href="http://ruby-doc.org/core-2.2.0/ObjectSpace.html">ObjectSpace</a> which contains a useful method #each_object to aid in the search.  ObjectSpace interacts with Ruby’s garbage collection facility which helps manage Ruby’s memory. Calling #each_object and passing in your class in question will allow you to find all living objects of that particular class (assigned to a variable or not):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Car</span><span class="p">){</span><span class="o">|</span><span class="n">car</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">car</span><span class="o">.</span><span class="n">object_id</span><span class="p">}</span>
</span><span class='line'><span class="c1">#IRB output</span>
</span><span class='line'>  <span class="c1">#70206505370260</span>
</span><span class='line'>  <span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby returns to you the number of objects in the Car class ‘1’ and your missing car’s object id, provided you #puts it (70206505370260).  If you had a bunch of objects in that class instead of just one like we do, you could pass in the value of a particular instance variable of your object in question into the block through an if statement to narrow down your search.</p>

<p>But I digress. Now that you are armed with this information, you can use another method in ObjectSpace called #_id2ref which converts an object id into a direct reference to the object to finally track down your car and save it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lecar</span> <span class="o">=</span> <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">_id2ref</span><span class="p">(</span><span class="mi">70206505370260</span><span class="p">)</span>
</span><span class='line'><span class="c1">#IRB output</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Car:0x007fb473a08528 @make=&quot;Renault&quot;, </span>
</span><span class='line'><span class="c1">#@model=&quot;LeCar&quot;, @year=1979&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">lecar</span><span class="o">.</span><span class="n">drive</span> <span class="o">==&gt;</span> <span class="s2">&quot;Vroom!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Way to go! You even remembered to store your car to a variable this time so this will not happen again. Jesse and Chester would be proud.</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/THCQ3CaMlB8" allowfullscreen></iframe></div>


<p>Now, if you want to have some more fun, ever wonder what other objects Ruby has hidden under the rug? Try this line of code in IRB sometime to see what strings Ruby currently has in memory. It yielded an array of 23,157 strings I did not know about!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">strings_array</span> <span class="o">=</span> <span class="o">[</span> <span class="o">]</span>
</span><span class='line'><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="nb">String</span><span class="p">){</span><span class="o">|</span><span class="n">string</span><span class="o">|</span> <span class="n">strings_array</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">_id2ref</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">object_id</span><span class="p">))}</span>
</span><span class='line'><span class="n">strings_array</span>
</span></code></pre></td></tr></table></div></figure>


<p>What’s yours say? SWEET!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A (New) Programmer’s Musings]]></title>
    <link href="http://travisje.github.io/blog/2015/06/14/my-first-post-on-octopress/"/>
    <updated>2015-06-14T14:41:34-04:00</updated>
    <id>http://travisje.github.io/blog/2015/06/14/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>A (new) Programmer’s Musings</p>

<p>Week two has just wrapped up on my wild and crazy journey that is The Flatiron School.  I feel really lucky to be here and to be surrounded by such smart folks, and even more lucky that in a few months time I might be able to work somewhere as a full time web developer.</p>

<p>As a relative newcomer to the programming field, I’ve found myself wondering about various aspects of the field that I’ve either taken for granted or never thought that much about before. To the veteran CS professional or developer, these may likely seem like unoriginal questions coupled with perhaps misguided musings, but hey, it’s my blog so I get to do what I want! ;)</p>

<p>And, since I’ve always had more fun asking questions than answering them, here are some of the things I’ve been thinking in no specific order:</p>

<h3>Why are there so many languages?</h3>


<p>It seems like the number of programming languages is increasing more rapidly as time goes on as opposed to human language which went from many to present day where it seems to be converging towards one. Is this an indication that we are still very early in the computer revolution? Or perhaps an indication that the two things are very different from each other? Maybe this isn&rsquo;t an apt comparison, but it’s something that piques my interest.</p>

<h3>Ruby as a language for people, instead of computers.</h3>


<p>I really dig this concept.  When I was trying to figure out what programming language to learn, I remember trying one that required like 5 lines to add 2 + 2.  While I can understand various loyalties people have towards one language or another (I also think there can be a natural tendency towards this the more difficult something is), it seems to me there is something very powerful in a flexible language that makes it easy to express yourself simply&ndash;something Ruby is known for. The easier something is to express, implement, and understand, the more opportunity there is for trial and error and experimentation, something I think crucial to invention and making anything better. After all, as our instructor Avi Flombaum has mentioned, the human brain can only process a <a href = 'http://www.technologyreview.com/view/415041/new-measure-of-human-brain-processing-speed/'>limited amount of data</a> (around 60 bits per second) when making a decision, so why not leave as much of this power as possible to devise better ways to perform the task at hand than to comprehend the instructions in the first place?</p>

<h3>Is language the most efficient way?</h3>


<p>I also wonder where this takes you if you follow the premise of this argument further. Are there inefficiencies of the spoken and written word that perhaps could allow for even more powerful languages to emerge? Perhaps there’s a sort of programming equivalent that allows for comprehension on multiple levels at once, like Charles Joseph Minard’s famous info graphic charting <a href="https://en.wikipedia.org/?title=Charles_Joseph_Minard"> Napoleon’s disastrous march through Russia in 1812</a>. I don&rsquo;t know enough about CS to answer this question yet, but it’s something I’ve been thinking about and look forward to exploring further someday!</p>
]]></content>
  </entry>
  
</feed>
